//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPGenerator.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OMS_V1Entities : DbContext
    {
        public OMS_V1Entities()
            : base("name=OMS_V1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<BulkAddExpens> BulkAddExpenses { get; set; }
        public virtual DbSet<BulkUpdate> BulkUpdates { get; set; }
        public virtual DbSet<CreditNote> CreditNotes { get; set; }
        public virtual DbSet<CurrencyAdjustment> CurrencyAdjustments { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Estimate> Estimates { get; set; }
        public virtual DbSet<ExpenseAccount> ExpenseAccounts { get; set; }
        public virtual DbSet<InventoryAdjustment> InventoryAdjustments { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<ItemDetail> ItemDetails { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ManualJournal> ManualJournals { get; set; }
        public virtual DbSet<PaymentMade> PaymentMades { get; set; }
        public virtual DbSet<PaymentReceived> PaymentReceiveds { get; set; }
        public virtual DbSet<PaymentTotalMade> PaymentTotalMades { get; set; }
        public virtual DbSet<PaymentTotalRecieved> PaymentTotalRecieveds { get; set; }
        public virtual DbSet<PriceList> PriceLists { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<RecordExpense> RecordExpenses { get; set; }
        public virtual DbSet<RecordMileage> RecordMileages { get; set; }
        public virtual DbSet<RecurringBill> RecurringBills { get; set; }
        public virtual DbSet<RecurringExpense> RecurringExpenses { get; set; }
        public virtual DbSet<RecurringInvoice> RecurringInvoices { get; set; }
        public virtual DbSet<RetainerInvoice> RetainerInvoices { get; set; }
        public virtual DbSet<SaleOrder> SaleOrders { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<UnpaidBill> UnpaidBills { get; set; }
        public virtual DbSet<UnpaidInvoice> UnpaidInvoices { get; set; }
        public virtual DbSet<VendorCredit> VendorCredits { get; set; }
    
        public virtual ObjectResult<Nullable<int>> DeleteAccount(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteAccount", accountIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteBills(Nullable<int> billID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("billID", billID) :
                new ObjectParameter("billID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteBills", billIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteBulkAddExpenses(Nullable<int> bulkAddExpensesID)
        {
            var bulkAddExpensesIDParameter = bulkAddExpensesID.HasValue ?
                new ObjectParameter("bulkAddExpensesID", bulkAddExpensesID) :
                new ObjectParameter("bulkAddExpensesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteBulkAddExpenses", bulkAddExpensesIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteBulkUpdate(Nullable<int> bulkUpdateID)
        {
            var bulkUpdateIDParameter = bulkUpdateID.HasValue ?
                new ObjectParameter("bulkUpdateID", bulkUpdateID) :
                new ObjectParameter("bulkUpdateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteBulkUpdate", bulkUpdateIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteCreditNote(Nullable<int> creditNoteID)
        {
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("creditNoteID", creditNoteID) :
                new ObjectParameter("creditNoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteCreditNote", creditNoteIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteCurrencyAdjustments(Nullable<int> currencyID)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("currencyID", currencyID) :
                new ObjectParameter("currencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteCurrencyAdjustments", currencyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteCustomers(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteCustomers", customerIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteEstimates(Nullable<int> estimateID)
        {
            var estimateIDParameter = estimateID.HasValue ?
                new ObjectParameter("estimateID", estimateID) :
                new ObjectParameter("estimateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteEstimates", estimateIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteExpenseAccount(Nullable<int> expenseAccountID)
        {
            var expenseAccountIDParameter = expenseAccountID.HasValue ?
                new ObjectParameter("expenseAccountID", expenseAccountID) :
                new ObjectParameter("expenseAccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteExpenseAccount", expenseAccountIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteInventoryAdjustments(Nullable<int> inventoryAdjustmentID)
        {
            var inventoryAdjustmentIDParameter = inventoryAdjustmentID.HasValue ?
                new ObjectParameter("inventoryAdjustmentID", inventoryAdjustmentID) :
                new ObjectParameter("inventoryAdjustmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteInventoryAdjustments", inventoryAdjustmentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteInvoices(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("invoiceID", invoiceID) :
                new ObjectParameter("invoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteInvoices", invoiceIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteItemDetails(Nullable<int> itemDetailID)
        {
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteItemDetails", itemDetailIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteItems(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("itemID", itemID) :
                new ObjectParameter("itemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteItems", itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteManualJournals(Nullable<int> manualJournalID)
        {
            var manualJournalIDParameter = manualJournalID.HasValue ?
                new ObjectParameter("manualJournalID", manualJournalID) :
                new ObjectParameter("manualJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteManualJournals", manualJournalIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeletePaymentMade(Nullable<int> paymentMadeID)
        {
            var paymentMadeIDParameter = paymentMadeID.HasValue ?
                new ObjectParameter("paymentMadeID", paymentMadeID) :
                new ObjectParameter("paymentMadeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeletePaymentMade", paymentMadeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeletePaymentReceived(Nullable<int> paymentReceivedID)
        {
            var paymentReceivedIDParameter = paymentReceivedID.HasValue ?
                new ObjectParameter("paymentReceivedID", paymentReceivedID) :
                new ObjectParameter("paymentReceivedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeletePaymentReceived", paymentReceivedIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeletePaymentTotalMade(Nullable<int> paymentTotalMadeID)
        {
            var paymentTotalMadeIDParameter = paymentTotalMadeID.HasValue ?
                new ObjectParameter("paymentTotalMadeID", paymentTotalMadeID) :
                new ObjectParameter("paymentTotalMadeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeletePaymentTotalMade", paymentTotalMadeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeletePaymentTotalRecieved(Nullable<int> paymentTotalRecievedID)
        {
            var paymentTotalRecievedIDParameter = paymentTotalRecievedID.HasValue ?
                new ObjectParameter("paymentTotalRecievedID", paymentTotalRecievedID) :
                new ObjectParameter("paymentTotalRecievedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeletePaymentTotalRecieved", paymentTotalRecievedIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeletePriceLists(Nullable<int> priceListID)
        {
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("priceListID", priceListID) :
                new ObjectParameter("priceListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeletePriceLists", priceListIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteProject(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteProject", projectIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeletePurchaseOrder(Nullable<int> purchaseOrderID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("purchaseOrderID", purchaseOrderID) :
                new ObjectParameter("purchaseOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeletePurchaseOrder", purchaseOrderIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteRecordExpense(Nullable<int> recordExpenseID)
        {
            var recordExpenseIDParameter = recordExpenseID.HasValue ?
                new ObjectParameter("recordExpenseID", recordExpenseID) :
                new ObjectParameter("recordExpenseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteRecordExpense", recordExpenseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteRecordMileage(Nullable<int> recordMileageID)
        {
            var recordMileageIDParameter = recordMileageID.HasValue ?
                new ObjectParameter("recordMileageID", recordMileageID) :
                new ObjectParameter("recordMileageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteRecordMileage", recordMileageIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteRecurringBill(Nullable<int> recurringBillID)
        {
            var recurringBillIDParameter = recurringBillID.HasValue ?
                new ObjectParameter("recurringBillID", recurringBillID) :
                new ObjectParameter("recurringBillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteRecurringBill", recurringBillIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteRecurringExpense(Nullable<int> recurringExpenseID)
        {
            var recurringExpenseIDParameter = recurringExpenseID.HasValue ?
                new ObjectParameter("recurringExpenseID", recurringExpenseID) :
                new ObjectParameter("recurringExpenseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteRecurringExpense", recurringExpenseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteRecurringInvoice(Nullable<int> recurringInvoiceID)
        {
            var recurringInvoiceIDParameter = recurringInvoiceID.HasValue ?
                new ObjectParameter("recurringInvoiceID", recurringInvoiceID) :
                new ObjectParameter("recurringInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteRecurringInvoice", recurringInvoiceIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteRetainerInvoices(Nullable<int> retainerInvoiceID)
        {
            var retainerInvoiceIDParameter = retainerInvoiceID.HasValue ?
                new ObjectParameter("retainerInvoiceID", retainerInvoiceID) :
                new ObjectParameter("retainerInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteRetainerInvoices", retainerInvoiceIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteSaleOrders(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("salesOrderID", salesOrderID) :
                new ObjectParameter("salesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteSaleOrders", salesOrderIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteTaxes(Nullable<int> taxID)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("taxID", taxID) :
                new ObjectParameter("taxID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteTaxes", taxIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteUnpaidBills(Nullable<int> unpaidBillID)
        {
            var unpaidBillIDParameter = unpaidBillID.HasValue ?
                new ObjectParameter("unpaidBillID", unpaidBillID) :
                new ObjectParameter("unpaidBillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteUnpaidBills", unpaidBillIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteUnpaidInvoices(Nullable<int> unpaidInvoiceID)
        {
            var unpaidInvoiceIDParameter = unpaidInvoiceID.HasValue ?
                new ObjectParameter("unpaidInvoiceID", unpaidInvoiceID) :
                new ObjectParameter("unpaidInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteUnpaidInvoices", unpaidInvoiceIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteVendorCredits(Nullable<int> vendorCreditID)
        {
            var vendorCreditIDParameter = vendorCreditID.HasValue ?
                new ObjectParameter("vendorCreditID", vendorCreditID) :
                new ObjectParameter("vendorCreditID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteVendorCredits", vendorCreditIDParameter);
        }
    
        public virtual ObjectResult<GetAccount_Result> GetAccount(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccount_Result>("GetAccount", accountIDParameter);
        }
    
        public virtual ObjectResult<GetBills_Result> GetBills(Nullable<int> billID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("billID", billID) :
                new ObjectParameter("billID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBills_Result>("GetBills", billIDParameter);
        }
    
        public virtual ObjectResult<GetBulkAddExpenses_Result> GetBulkAddExpenses(Nullable<int> bulkAddExpensesID)
        {
            var bulkAddExpensesIDParameter = bulkAddExpensesID.HasValue ?
                new ObjectParameter("bulkAddExpensesID", bulkAddExpensesID) :
                new ObjectParameter("bulkAddExpensesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBulkAddExpenses_Result>("GetBulkAddExpenses", bulkAddExpensesIDParameter);
        }
    
        public virtual ObjectResult<GetBulkUpdate_Result> GetBulkUpdate(Nullable<int> bulkUpdateID)
        {
            var bulkUpdateIDParameter = bulkUpdateID.HasValue ?
                new ObjectParameter("bulkUpdateID", bulkUpdateID) :
                new ObjectParameter("bulkUpdateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBulkUpdate_Result>("GetBulkUpdate", bulkUpdateIDParameter);
        }
    
        public virtual ObjectResult<GetCreditNote_Result> GetCreditNote(Nullable<int> creditNoteID)
        {
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("creditNoteID", creditNoteID) :
                new ObjectParameter("creditNoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCreditNote_Result>("GetCreditNote", creditNoteIDParameter);
        }
    
        public virtual ObjectResult<GetCurrencyAdjustments_Result> GetCurrencyAdjustments(Nullable<int> currencyID)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("currencyID", currencyID) :
                new ObjectParameter("currencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrencyAdjustments_Result>("GetCurrencyAdjustments", currencyIDParameter);
        }
    
        public virtual ObjectResult<GetCustomers_Result> GetCustomers(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomers_Result>("GetCustomers", customerIDParameter);
        }
    
        public virtual ObjectResult<GetEstimates_Result> GetEstimates(Nullable<int> estimateID)
        {
            var estimateIDParameter = estimateID.HasValue ?
                new ObjectParameter("estimateID", estimateID) :
                new ObjectParameter("estimateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEstimates_Result>("GetEstimates", estimateIDParameter);
        }
    
        public virtual ObjectResult<GetExpenseAccount_Result> GetExpenseAccount(Nullable<int> expenseAccountID)
        {
            var expenseAccountIDParameter = expenseAccountID.HasValue ?
                new ObjectParameter("expenseAccountID", expenseAccountID) :
                new ObjectParameter("expenseAccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExpenseAccount_Result>("GetExpenseAccount", expenseAccountIDParameter);
        }
    
        public virtual ObjectResult<GetInventoryAdjustments_Result> GetInventoryAdjustments(Nullable<int> inventoryAdjustmentID)
        {
            var inventoryAdjustmentIDParameter = inventoryAdjustmentID.HasValue ?
                new ObjectParameter("inventoryAdjustmentID", inventoryAdjustmentID) :
                new ObjectParameter("inventoryAdjustmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInventoryAdjustments_Result>("GetInventoryAdjustments", inventoryAdjustmentIDParameter);
        }
    
        public virtual ObjectResult<GetInvoices_Result> GetInvoices(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("invoiceID", invoiceID) :
                new ObjectParameter("invoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoices_Result>("GetInvoices", invoiceIDParameter);
        }
    
        public virtual ObjectResult<GetItemDetails_Result> GetItemDetails(Nullable<int> itemDetailID)
        {
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemDetails_Result>("GetItemDetails", itemDetailIDParameter);
        }
    
        public virtual ObjectResult<GetItems_Result> GetItems(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("itemID", itemID) :
                new ObjectParameter("itemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItems_Result>("GetItems", itemIDParameter);
        }
    
        public virtual ObjectResult<GetManualJournals_Result> GetManualJournals(Nullable<int> manualJournalID)
        {
            var manualJournalIDParameter = manualJournalID.HasValue ?
                new ObjectParameter("manualJournalID", manualJournalID) :
                new ObjectParameter("manualJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetManualJournals_Result>("GetManualJournals", manualJournalIDParameter);
        }
    
        public virtual ObjectResult<GetPaymentMade_Result> GetPaymentMade(Nullable<int> paymentMadeID)
        {
            var paymentMadeIDParameter = paymentMadeID.HasValue ?
                new ObjectParameter("paymentMadeID", paymentMadeID) :
                new ObjectParameter("paymentMadeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentMade_Result>("GetPaymentMade", paymentMadeIDParameter);
        }
    
        public virtual ObjectResult<GetPaymentReceived_Result> GetPaymentReceived(Nullable<int> paymentReceivedID)
        {
            var paymentReceivedIDParameter = paymentReceivedID.HasValue ?
                new ObjectParameter("paymentReceivedID", paymentReceivedID) :
                new ObjectParameter("paymentReceivedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentReceived_Result>("GetPaymentReceived", paymentReceivedIDParameter);
        }
    
        public virtual ObjectResult<GetPaymentTotalMade_Result> GetPaymentTotalMade(Nullable<int> paymentTotalMadeID)
        {
            var paymentTotalMadeIDParameter = paymentTotalMadeID.HasValue ?
                new ObjectParameter("paymentTotalMadeID", paymentTotalMadeID) :
                new ObjectParameter("paymentTotalMadeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentTotalMade_Result>("GetPaymentTotalMade", paymentTotalMadeIDParameter);
        }
    
        public virtual ObjectResult<GetPaymentTotalRecieved_Result> GetPaymentTotalRecieved(Nullable<int> paymentTotalRecievedID)
        {
            var paymentTotalRecievedIDParameter = paymentTotalRecievedID.HasValue ?
                new ObjectParameter("paymentTotalRecievedID", paymentTotalRecievedID) :
                new ObjectParameter("paymentTotalRecievedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentTotalRecieved_Result>("GetPaymentTotalRecieved", paymentTotalRecievedIDParameter);
        }
    
        public virtual ObjectResult<GetPriceLists_Result> GetPriceLists(Nullable<int> priceListID)
        {
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("priceListID", priceListID) :
                new ObjectParameter("priceListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPriceLists_Result>("GetPriceLists", priceListIDParameter);
        }
    
        public virtual ObjectResult<GetProject_Result> GetProject(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProject_Result>("GetProject", projectIDParameter);
        }
    
        public virtual ObjectResult<GetPurchaseOrder_Result> GetPurchaseOrder(Nullable<int> purchaseOrderID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("purchaseOrderID", purchaseOrderID) :
                new ObjectParameter("purchaseOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseOrder_Result>("GetPurchaseOrder", purchaseOrderIDParameter);
        }
    
        public virtual ObjectResult<GetRecordExpense_Result> GetRecordExpense(Nullable<int> recordExpenseID)
        {
            var recordExpenseIDParameter = recordExpenseID.HasValue ?
                new ObjectParameter("recordExpenseID", recordExpenseID) :
                new ObjectParameter("recordExpenseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecordExpense_Result>("GetRecordExpense", recordExpenseIDParameter);
        }
    
        public virtual ObjectResult<GetRecordMileage_Result> GetRecordMileage(Nullable<int> recordMileageID)
        {
            var recordMileageIDParameter = recordMileageID.HasValue ?
                new ObjectParameter("recordMileageID", recordMileageID) :
                new ObjectParameter("recordMileageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecordMileage_Result>("GetRecordMileage", recordMileageIDParameter);
        }
    
        public virtual ObjectResult<GetRecurringBill_Result> GetRecurringBill(Nullable<int> recurringBillID)
        {
            var recurringBillIDParameter = recurringBillID.HasValue ?
                new ObjectParameter("recurringBillID", recurringBillID) :
                new ObjectParameter("recurringBillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecurringBill_Result>("GetRecurringBill", recurringBillIDParameter);
        }
    
        public virtual ObjectResult<GetRecurringExpense_Result> GetRecurringExpense(Nullable<int> recurringExpenseID)
        {
            var recurringExpenseIDParameter = recurringExpenseID.HasValue ?
                new ObjectParameter("recurringExpenseID", recurringExpenseID) :
                new ObjectParameter("recurringExpenseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecurringExpense_Result>("GetRecurringExpense", recurringExpenseIDParameter);
        }
    
        public virtual ObjectResult<GetRecurringInvoice_Result> GetRecurringInvoice(Nullable<int> recurringInvoiceID)
        {
            var recurringInvoiceIDParameter = recurringInvoiceID.HasValue ?
                new ObjectParameter("recurringInvoiceID", recurringInvoiceID) :
                new ObjectParameter("recurringInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecurringInvoice_Result>("GetRecurringInvoice", recurringInvoiceIDParameter);
        }
    
        public virtual ObjectResult<GetRetainerInvoices_Result> GetRetainerInvoices(Nullable<int> retainerInvoiceID)
        {
            var retainerInvoiceIDParameter = retainerInvoiceID.HasValue ?
                new ObjectParameter("retainerInvoiceID", retainerInvoiceID) :
                new ObjectParameter("retainerInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRetainerInvoices_Result>("GetRetainerInvoices", retainerInvoiceIDParameter);
        }
    
        public virtual ObjectResult<GetSaleOrders_Result> GetSaleOrders(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("salesOrderID", salesOrderID) :
                new ObjectParameter("salesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleOrders_Result>("GetSaleOrders", salesOrderIDParameter);
        }
    
        public virtual ObjectResult<GetTaxes_Result> GetTaxes(Nullable<int> taxID)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("taxID", taxID) :
                new ObjectParameter("taxID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTaxes_Result>("GetTaxes", taxIDParameter);
        }
    
        public virtual ObjectResult<GetUnpaidBills_Result> GetUnpaidBills(Nullable<int> unpaidBillID)
        {
            var unpaidBillIDParameter = unpaidBillID.HasValue ?
                new ObjectParameter("unpaidBillID", unpaidBillID) :
                new ObjectParameter("unpaidBillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnpaidBills_Result>("GetUnpaidBills", unpaidBillIDParameter);
        }
    
        public virtual ObjectResult<GetUnpaidInvoices_Result> GetUnpaidInvoices(Nullable<int> unpaidInvoiceID)
        {
            var unpaidInvoiceIDParameter = unpaidInvoiceID.HasValue ?
                new ObjectParameter("unpaidInvoiceID", unpaidInvoiceID) :
                new ObjectParameter("unpaidInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnpaidInvoices_Result>("GetUnpaidInvoices", unpaidInvoiceIDParameter);
        }
    
        public virtual ObjectResult<GetVendorCredits_Result> GetVendorCredits(Nullable<int> vendorCreditID)
        {
            var vendorCreditIDParameter = vendorCreditID.HasValue ?
                new ObjectParameter("vendorCreditID", vendorCreditID) :
                new ObjectParameter("vendorCreditID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorCredits_Result>("GetVendorCredits", vendorCreditIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetAccount(Nullable<int> accountID, Nullable<int> accountTypeID, string accountName, string accountCode, string description)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("accountTypeID", accountTypeID) :
                new ObjectParameter("accountTypeID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("accountName", accountName) :
                new ObjectParameter("accountName", typeof(string));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("accountCode", accountCode) :
                new ObjectParameter("accountCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetAccount", accountIDParameter, accountTypeIDParameter, accountNameParameter, accountCodeParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetBills(Nullable<int> billID, Nullable<int> vendorID, string billNo, string orderNo, Nullable<System.DateTime> billDate, Nullable<System.DateTime> dueDate, Nullable<int> itemDetailID, string customerNotes, Nullable<decimal> adjustmentValue, string notes, Nullable<decimal> shippingCharges, string adjustmentText)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("billID", billID) :
                new ObjectParameter("billID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var billNoParameter = billNo != null ?
                new ObjectParameter("billNo", billNo) :
                new ObjectParameter("billNo", typeof(string));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(string));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("billDate", billDate) :
                new ObjectParameter("billDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("dueDate", dueDate) :
                new ObjectParameter("dueDate", typeof(System.DateTime));
    
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            var customerNotesParameter = customerNotes != null ?
                new ObjectParameter("customerNotes", customerNotes) :
                new ObjectParameter("customerNotes", typeof(string));
    
            var adjustmentValueParameter = adjustmentValue.HasValue ?
                new ObjectParameter("adjustmentValue", adjustmentValue) :
                new ObjectParameter("adjustmentValue", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var shippingChargesParameter = shippingCharges.HasValue ?
                new ObjectParameter("shippingCharges", shippingCharges) :
                new ObjectParameter("shippingCharges", typeof(decimal));
    
            var adjustmentTextParameter = adjustmentText != null ?
                new ObjectParameter("adjustmentText", adjustmentText) :
                new ObjectParameter("adjustmentText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetBills", billIDParameter, vendorIDParameter, billNoParameter, orderNoParameter, billDateParameter, dueDateParameter, itemDetailIDParameter, customerNotesParameter, adjustmentValueParameter, notesParameter, shippingChargesParameter, adjustmentTextParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetBulkAddExpenses(Nullable<int> bulkAddExpensesID, Nullable<System.DateTime> date, Nullable<int> expenseAccountID, Nullable<int> amount, Nullable<int> paidThroughID, Nullable<int> vendorID, Nullable<int> customerID, Nullable<int> projectID, Nullable<bool> billable)
        {
            var bulkAddExpensesIDParameter = bulkAddExpensesID.HasValue ?
                new ObjectParameter("bulkAddExpensesID", bulkAddExpensesID) :
                new ObjectParameter("bulkAddExpensesID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var expenseAccountIDParameter = expenseAccountID.HasValue ?
                new ObjectParameter("expenseAccountID", expenseAccountID) :
                new ObjectParameter("expenseAccountID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var paidThroughIDParameter = paidThroughID.HasValue ?
                new ObjectParameter("paidThroughID", paidThroughID) :
                new ObjectParameter("paidThroughID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var billableParameter = billable.HasValue ?
                new ObjectParameter("billable", billable) :
                new ObjectParameter("billable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetBulkAddExpenses", bulkAddExpensesIDParameter, dateParameter, expenseAccountIDParameter, amountParameter, paidThroughIDParameter, vendorIDParameter, customerIDParameter, projectIDParameter, billableParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetBulkUpdate(Nullable<int> bulkUpdateID, Nullable<int> accountID, Nullable<int> contactID, Nullable<int> new_Column, Nullable<System.DateTime> dateRangeStart, Nullable<System.DateTime> dateRangeEnd, Nullable<decimal> totalAmountRangeStart, Nullable<decimal> totalAmountRangeEnd)
        {
            var bulkUpdateIDParameter = bulkUpdateID.HasValue ?
                new ObjectParameter("bulkUpdateID", bulkUpdateID) :
                new ObjectParameter("bulkUpdateID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("contactID", contactID) :
                new ObjectParameter("contactID", typeof(int));
    
            var new_ColumnParameter = new_Column.HasValue ?
                new ObjectParameter("new_Column", new_Column) :
                new ObjectParameter("new_Column", typeof(int));
    
            var dateRangeStartParameter = dateRangeStart.HasValue ?
                new ObjectParameter("dateRangeStart", dateRangeStart) :
                new ObjectParameter("dateRangeStart", typeof(System.DateTime));
    
            var dateRangeEndParameter = dateRangeEnd.HasValue ?
                new ObjectParameter("dateRangeEnd", dateRangeEnd) :
                new ObjectParameter("dateRangeEnd", typeof(System.DateTime));
    
            var totalAmountRangeStartParameter = totalAmountRangeStart.HasValue ?
                new ObjectParameter("totalAmountRangeStart", totalAmountRangeStart) :
                new ObjectParameter("totalAmountRangeStart", typeof(decimal));
    
            var totalAmountRangeEndParameter = totalAmountRangeEnd.HasValue ?
                new ObjectParameter("totalAmountRangeEnd", totalAmountRangeEnd) :
                new ObjectParameter("totalAmountRangeEnd", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetBulkUpdate", bulkUpdateIDParameter, accountIDParameter, contactIDParameter, new_ColumnParameter, dateRangeStartParameter, dateRangeEndParameter, totalAmountRangeStartParameter, totalAmountRangeEndParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetCreditNote(Nullable<int> creditNoteID, Nullable<int> customerID, Nullable<System.Guid> creditNoteNo, string referenceNo, Nullable<System.DateTime> creditNoteDate, Nullable<int> salesPersonID, string subject, Nullable<int> itemDetailID, string customerNotes, Nullable<decimal> adjustmentValue, Nullable<bool> termsConditions, Nullable<decimal> shippingCharges, string adjustmentText)
        {
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("creditNoteID", creditNoteID) :
                new ObjectParameter("creditNoteID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var creditNoteNoParameter = creditNoteNo.HasValue ?
                new ObjectParameter("creditNoteNo", creditNoteNo) :
                new ObjectParameter("creditNoteNo", typeof(System.Guid));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("referenceNo", referenceNo) :
                new ObjectParameter("referenceNo", typeof(string));
    
            var creditNoteDateParameter = creditNoteDate.HasValue ?
                new ObjectParameter("creditNoteDate", creditNoteDate) :
                new ObjectParameter("creditNoteDate", typeof(System.DateTime));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("salesPersonID", salesPersonID) :
                new ObjectParameter("salesPersonID", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            var customerNotesParameter = customerNotes != null ?
                new ObjectParameter("customerNotes", customerNotes) :
                new ObjectParameter("customerNotes", typeof(string));
    
            var adjustmentValueParameter = adjustmentValue.HasValue ?
                new ObjectParameter("adjustmentValue", adjustmentValue) :
                new ObjectParameter("adjustmentValue", typeof(decimal));
    
            var termsConditionsParameter = termsConditions.HasValue ?
                new ObjectParameter("termsConditions", termsConditions) :
                new ObjectParameter("termsConditions", typeof(bool));
    
            var shippingChargesParameter = shippingCharges.HasValue ?
                new ObjectParameter("shippingCharges", shippingCharges) :
                new ObjectParameter("shippingCharges", typeof(decimal));
    
            var adjustmentTextParameter = adjustmentText != null ?
                new ObjectParameter("adjustmentText", adjustmentText) :
                new ObjectParameter("adjustmentText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetCreditNote", creditNoteIDParameter, customerIDParameter, creditNoteNoParameter, referenceNoParameter, creditNoteDateParameter, salesPersonIDParameter, subjectParameter, itemDetailIDParameter, customerNotesParameter, adjustmentValueParameter, termsConditionsParameter, shippingChargesParameter, adjustmentTextParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetCurrencyAdjustments(Nullable<int> currencyID, Nullable<System.DateTime> dateofAdjustment, Nullable<decimal> exchangeRate, string notes)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("currencyID", currencyID) :
                new ObjectParameter("currencyID", typeof(int));
    
            var dateofAdjustmentParameter = dateofAdjustment.HasValue ?
                new ObjectParameter("dateofAdjustment", dateofAdjustment) :
                new ObjectParameter("dateofAdjustment", typeof(System.DateTime));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("exchangeRate", exchangeRate) :
                new ObjectParameter("exchangeRate", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetCurrencyAdjustments", currencyIDParameter, dateofAdjustmentParameter, exchangeRateParameter, notesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetCustomers(Nullable<int> customerTypeID, Nullable<int> customerID, Nullable<int> salutationID, string firstName, string lastName, Nullable<int> companyID, string customerEmail, string workPhone, string mobile, string skype, string designation, string department, string website, Nullable<int> currencyID, string opening_Balance, Nullable<int> paymentTermID, Nullable<bool> enablePortal, Nullable<int> portalLanguageID, string facebook, string twitter, string attention, Nullable<int> countryID, Nullable<int> cityID, string address, Nullable<int> stateID, string zipCode, string phone, string fax, Nullable<int> contactPersonID, string remarks)
        {
            var customerTypeIDParameter = customerTypeID.HasValue ?
                new ObjectParameter("customerTypeID", customerTypeID) :
                new ObjectParameter("customerTypeID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var salutationIDParameter = salutationID.HasValue ?
                new ObjectParameter("salutationID", salutationID) :
                new ObjectParameter("salutationID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("customerEmail", customerEmail) :
                new ObjectParameter("customerEmail", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("workPhone", workPhone) :
                new ObjectParameter("workPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var skypeParameter = skype != null ?
                new ObjectParameter("skype", skype) :
                new ObjectParameter("skype", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("designation", designation) :
                new ObjectParameter("designation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("website", website) :
                new ObjectParameter("website", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("currencyID", currencyID) :
                new ObjectParameter("currencyID", typeof(int));
    
            var opening_BalanceParameter = opening_Balance != null ?
                new ObjectParameter("opening_Balance", opening_Balance) :
                new ObjectParameter("opening_Balance", typeof(string));
    
            var paymentTermIDParameter = paymentTermID.HasValue ?
                new ObjectParameter("paymentTermID", paymentTermID) :
                new ObjectParameter("paymentTermID", typeof(int));
    
            var enablePortalParameter = enablePortal.HasValue ?
                new ObjectParameter("enablePortal", enablePortal) :
                new ObjectParameter("enablePortal", typeof(bool));
    
            var portalLanguageIDParameter = portalLanguageID.HasValue ?
                new ObjectParameter("portalLanguageID", portalLanguageID) :
                new ObjectParameter("portalLanguageID", typeof(int));
    
            var facebookParameter = facebook != null ?
                new ObjectParameter("facebook", facebook) :
                new ObjectParameter("facebook", typeof(string));
    
            var twitterParameter = twitter != null ?
                new ObjectParameter("twitter", twitter) :
                new ObjectParameter("twitter", typeof(string));
    
            var attentionParameter = attention != null ?
                new ObjectParameter("attention", attention) :
                new ObjectParameter("attention", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("cityID", cityID) :
                new ObjectParameter("cityID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("stateID", stateID) :
                new ObjectParameter("stateID", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("zipCode", zipCode) :
                new ObjectParameter("zipCode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var contactPersonIDParameter = contactPersonID.HasValue ?
                new ObjectParameter("contactPersonID", contactPersonID) :
                new ObjectParameter("contactPersonID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetCustomers", customerTypeIDParameter, customerIDParameter, salutationIDParameter, firstNameParameter, lastNameParameter, companyIDParameter, customerEmailParameter, workPhoneParameter, mobileParameter, skypeParameter, designationParameter, departmentParameter, websiteParameter, currencyIDParameter, opening_BalanceParameter, paymentTermIDParameter, enablePortalParameter, portalLanguageIDParameter, facebookParameter, twitterParameter, attentionParameter, countryIDParameter, cityIDParameter, addressParameter, stateIDParameter, zipCodeParameter, phoneParameter, faxParameter, contactPersonIDParameter, remarksParameter);
        }
    
        public virtual ObjectResult<SetErrorLog_Result> SetErrorLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SetErrorLog_Result>("SetErrorLog");
        }
    
        public virtual ObjectResult<Nullable<int>> SetEstimates(Nullable<int> customerID, Nullable<int> estimateID, Nullable<System.Guid> estimateNo, string referenceNo, Nullable<System.DateTime> estimateDate, Nullable<System.DateTime> expiryDate, Nullable<int> salesPersonID, Nullable<int> projectID, string subject, Nullable<int> itemDetailID, string customerNotes, Nullable<bool> retainerInvoice, Nullable<decimal> shippingCharges, Nullable<bool> termsConditions, Nullable<decimal> adjustmentValue, string adjustmentText)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var estimateIDParameter = estimateID.HasValue ?
                new ObjectParameter("estimateID", estimateID) :
                new ObjectParameter("estimateID", typeof(int));
    
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("estimateNo", estimateNo) :
                new ObjectParameter("estimateNo", typeof(System.Guid));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("referenceNo", referenceNo) :
                new ObjectParameter("referenceNo", typeof(string));
    
            var estimateDateParameter = estimateDate.HasValue ?
                new ObjectParameter("estimateDate", estimateDate) :
                new ObjectParameter("estimateDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("expiryDate", expiryDate) :
                new ObjectParameter("expiryDate", typeof(System.DateTime));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("salesPersonID", salesPersonID) :
                new ObjectParameter("salesPersonID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            var customerNotesParameter = customerNotes != null ?
                new ObjectParameter("customerNotes", customerNotes) :
                new ObjectParameter("customerNotes", typeof(string));
    
            var retainerInvoiceParameter = retainerInvoice.HasValue ?
                new ObjectParameter("retainerInvoice", retainerInvoice) :
                new ObjectParameter("retainerInvoice", typeof(bool));
    
            var shippingChargesParameter = shippingCharges.HasValue ?
                new ObjectParameter("shippingCharges", shippingCharges) :
                new ObjectParameter("shippingCharges", typeof(decimal));
    
            var termsConditionsParameter = termsConditions.HasValue ?
                new ObjectParameter("termsConditions", termsConditions) :
                new ObjectParameter("termsConditions", typeof(bool));
    
            var adjustmentValueParameter = adjustmentValue.HasValue ?
                new ObjectParameter("adjustmentValue", adjustmentValue) :
                new ObjectParameter("adjustmentValue", typeof(decimal));
    
            var adjustmentTextParameter = adjustmentText != null ?
                new ObjectParameter("adjustmentText", adjustmentText) :
                new ObjectParameter("adjustmentText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetEstimates", customerIDParameter, estimateIDParameter, estimateNoParameter, referenceNoParameter, estimateDateParameter, expiryDateParameter, salesPersonIDParameter, projectIDParameter, subjectParameter, itemDetailIDParameter, customerNotesParameter, retainerInvoiceParameter, shippingChargesParameter, termsConditionsParameter, adjustmentValueParameter, adjustmentTextParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetExpenseAccount(Nullable<int> expenseAccountID, Nullable<int> accountTypeID, string accountName, Nullable<bool> subAccount, string accountCode, string description)
        {
            var expenseAccountIDParameter = expenseAccountID.HasValue ?
                new ObjectParameter("expenseAccountID", expenseAccountID) :
                new ObjectParameter("expenseAccountID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("accountTypeID", accountTypeID) :
                new ObjectParameter("accountTypeID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("accountName", accountName) :
                new ObjectParameter("accountName", typeof(string));
    
            var subAccountParameter = subAccount.HasValue ?
                new ObjectParameter("subAccount", subAccount) :
                new ObjectParameter("subAccount", typeof(bool));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("accountCode", accountCode) :
                new ObjectParameter("accountCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetExpenseAccount", expenseAccountIDParameter, accountTypeIDParameter, accountNameParameter, subAccountParameter, accountCodeParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetInventoryAdjustments(Nullable<int> inventoryAdjustmentID, Nullable<int> adjustmentModeID, string referenceNo, Nullable<System.DateTime> date, Nullable<int> accountID, string reason, string description, Nullable<int> itemDetailID)
        {
            var inventoryAdjustmentIDParameter = inventoryAdjustmentID.HasValue ?
                new ObjectParameter("inventoryAdjustmentID", inventoryAdjustmentID) :
                new ObjectParameter("inventoryAdjustmentID", typeof(int));
    
            var adjustmentModeIDParameter = adjustmentModeID.HasValue ?
                new ObjectParameter("adjustmentModeID", adjustmentModeID) :
                new ObjectParameter("adjustmentModeID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("referenceNo", referenceNo) :
                new ObjectParameter("referenceNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetInventoryAdjustments", inventoryAdjustmentIDParameter, adjustmentModeIDParameter, referenceNoParameter, dateParameter, accountIDParameter, reasonParameter, descriptionParameter, itemDetailIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetInvoices(Nullable<int> invoiceID, Nullable<int> customerID, Nullable<System.Guid> invoiceNo, string orderNo, Nullable<System.DateTime> invoiceDate, Nullable<int> termID, Nullable<System.DateTime> dueDate, Nullable<int> salesPersonID, string subject, Nullable<decimal> shippingCharges, Nullable<decimal> adjustmentValue, string adjustmentText)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("invoiceID", invoiceID) :
                new ObjectParameter("invoiceID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("invoiceNo", invoiceNo) :
                new ObjectParameter("invoiceNo", typeof(System.Guid));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("invoiceDate", invoiceDate) :
                new ObjectParameter("invoiceDate", typeof(System.DateTime));
    
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("termID", termID) :
                new ObjectParameter("termID", typeof(int));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("dueDate", dueDate) :
                new ObjectParameter("dueDate", typeof(System.DateTime));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("salesPersonID", salesPersonID) :
                new ObjectParameter("salesPersonID", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var shippingChargesParameter = shippingCharges.HasValue ?
                new ObjectParameter("shippingCharges", shippingCharges) :
                new ObjectParameter("shippingCharges", typeof(decimal));
    
            var adjustmentValueParameter = adjustmentValue.HasValue ?
                new ObjectParameter("adjustmentValue", adjustmentValue) :
                new ObjectParameter("adjustmentValue", typeof(decimal));
    
            var adjustmentTextParameter = adjustmentText != null ?
                new ObjectParameter("adjustmentText", adjustmentText) :
                new ObjectParameter("adjustmentText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetInvoices", invoiceIDParameter, customerIDParameter, invoiceNoParameter, orderNoParameter, invoiceDateParameter, termIDParameter, dueDateParameter, salesPersonIDParameter, subjectParameter, shippingChargesParameter, adjustmentValueParameter, adjustmentTextParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetItemDetails(Nullable<int> itemDetailID, string itemDetails, Nullable<decimal> quantity, Nullable<decimal> rate, Nullable<decimal> discount, Nullable<int> taxID, Nullable<decimal> amount, Nullable<decimal> quantityAvailable, Nullable<decimal> newQuantityInHand, Nullable<decimal> quantityAdjusted, Nullable<int> customerID)
        {
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            var itemDetailsParameter = itemDetails != null ?
                new ObjectParameter("itemDetails", itemDetails) :
                new ObjectParameter("itemDetails", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("rate", rate) :
                new ObjectParameter("rate", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(decimal));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("taxID", taxID) :
                new ObjectParameter("taxID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var quantityAvailableParameter = quantityAvailable.HasValue ?
                new ObjectParameter("quantityAvailable", quantityAvailable) :
                new ObjectParameter("quantityAvailable", typeof(decimal));
    
            var newQuantityInHandParameter = newQuantityInHand.HasValue ?
                new ObjectParameter("newQuantityInHand", newQuantityInHand) :
                new ObjectParameter("newQuantityInHand", typeof(decimal));
    
            var quantityAdjustedParameter = quantityAdjusted.HasValue ?
                new ObjectParameter("quantityAdjusted", quantityAdjusted) :
                new ObjectParameter("quantityAdjusted", typeof(decimal));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetItemDetails", itemDetailIDParameter, itemDetailsParameter, quantityParameter, rateParameter, discountParameter, taxIDParameter, amountParameter, quantityAvailableParameter, newQuantityInHandParameter, quantityAdjustedParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetItems(Nullable<int> itemID, Nullable<int> typeID, Nullable<int> name, Nullable<int> unitID, Nullable<bool> salesInformation, Nullable<decimal> sellingPrice, Nullable<int> sellingAccountID, string sellingDescription, Nullable<int> taxID, Nullable<bool> purchaseInformation, Nullable<decimal> costPrice, Nullable<int> purchaseAccountID, string puchaseDescription, Nullable<bool> trackInventory)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("itemID", itemID) :
                new ObjectParameter("itemID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("typeID", typeID) :
                new ObjectParameter("typeID", typeof(int));
    
            var nameParameter = name.HasValue ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("unitID", unitID) :
                new ObjectParameter("unitID", typeof(int));
    
            var salesInformationParameter = salesInformation.HasValue ?
                new ObjectParameter("salesInformation", salesInformation) :
                new ObjectParameter("salesInformation", typeof(bool));
    
            var sellingPriceParameter = sellingPrice.HasValue ?
                new ObjectParameter("sellingPrice", sellingPrice) :
                new ObjectParameter("sellingPrice", typeof(decimal));
    
            var sellingAccountIDParameter = sellingAccountID.HasValue ?
                new ObjectParameter("sellingAccountID", sellingAccountID) :
                new ObjectParameter("sellingAccountID", typeof(int));
    
            var sellingDescriptionParameter = sellingDescription != null ?
                new ObjectParameter("sellingDescription", sellingDescription) :
                new ObjectParameter("sellingDescription", typeof(string));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("taxID", taxID) :
                new ObjectParameter("taxID", typeof(int));
    
            var purchaseInformationParameter = purchaseInformation.HasValue ?
                new ObjectParameter("purchaseInformation", purchaseInformation) :
                new ObjectParameter("purchaseInformation", typeof(bool));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("costPrice", costPrice) :
                new ObjectParameter("costPrice", typeof(decimal));
    
            var purchaseAccountIDParameter = purchaseAccountID.HasValue ?
                new ObjectParameter("purchaseAccountID", purchaseAccountID) :
                new ObjectParameter("purchaseAccountID", typeof(int));
    
            var puchaseDescriptionParameter = puchaseDescription != null ?
                new ObjectParameter("puchaseDescription", puchaseDescription) :
                new ObjectParameter("puchaseDescription", typeof(string));
    
            var trackInventoryParameter = trackInventory.HasValue ?
                new ObjectParameter("trackInventory", trackInventory) :
                new ObjectParameter("trackInventory", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetItems", itemIDParameter, typeIDParameter, nameParameter, unitIDParameter, salesInformationParameter, sellingPriceParameter, sellingAccountIDParameter, sellingDescriptionParameter, taxIDParameter, purchaseInformationParameter, costPriceParameter, purchaseAccountIDParameter, puchaseDescriptionParameter, trackInventoryParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetManualJournals(Nullable<int> manualJournalID, Nullable<System.DateTime> date, Nullable<int> journalNo, string referenceNo, string notes, Nullable<bool> cashBased, Nullable<int> currencyID, Nullable<int> accountID, string description, Nullable<int> contactID, Nullable<int> taxID, Nullable<decimal> debits, Nullable<decimal> creditID, Nullable<decimal> shippingCharges, Nullable<decimal> adjustmentValue, string adjustmentText)
        {
            var manualJournalIDParameter = manualJournalID.HasValue ?
                new ObjectParameter("manualJournalID", manualJournalID) :
                new ObjectParameter("manualJournalID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var journalNoParameter = journalNo.HasValue ?
                new ObjectParameter("journalNo", journalNo) :
                new ObjectParameter("journalNo", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("referenceNo", referenceNo) :
                new ObjectParameter("referenceNo", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var cashBasedParameter = cashBased.HasValue ?
                new ObjectParameter("cashBased", cashBased) :
                new ObjectParameter("cashBased", typeof(bool));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("currencyID", currencyID) :
                new ObjectParameter("currencyID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("contactID", contactID) :
                new ObjectParameter("contactID", typeof(int));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("taxID", taxID) :
                new ObjectParameter("taxID", typeof(int));
    
            var debitsParameter = debits.HasValue ?
                new ObjectParameter("debits", debits) :
                new ObjectParameter("debits", typeof(decimal));
    
            var creditIDParameter = creditID.HasValue ?
                new ObjectParameter("creditID", creditID) :
                new ObjectParameter("creditID", typeof(decimal));
    
            var shippingChargesParameter = shippingCharges.HasValue ?
                new ObjectParameter("shippingCharges", shippingCharges) :
                new ObjectParameter("shippingCharges", typeof(decimal));
    
            var adjustmentValueParameter = adjustmentValue.HasValue ?
                new ObjectParameter("adjustmentValue", adjustmentValue) :
                new ObjectParameter("adjustmentValue", typeof(decimal));
    
            var adjustmentTextParameter = adjustmentText != null ?
                new ObjectParameter("adjustmentText", adjustmentText) :
                new ObjectParameter("adjustmentText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetManualJournals", manualJournalIDParameter, dateParameter, journalNoParameter, referenceNoParameter, notesParameter, cashBasedParameter, currencyIDParameter, accountIDParameter, descriptionParameter, contactIDParameter, taxIDParameter, debitsParameter, creditIDParameter, shippingChargesParameter, adjustmentValueParameter, adjustmentTextParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetPaymentMade(Nullable<int> paymentMadeID, Nullable<int> vendorID, Nullable<decimal> amount, Nullable<System.DateTime> paymentDate, Nullable<int> paymentTermID, Nullable<int> paidThroughID, string referenceNo, Nullable<bool> taxDeducted, Nullable<int> unpaidBillID, Nullable<int> paymentTotalMadeID, string notes)
        {
            var paymentMadeIDParameter = paymentMadeID.HasValue ?
                new ObjectParameter("paymentMadeID", paymentMadeID) :
                new ObjectParameter("paymentMadeID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("paymentDate", paymentDate) :
                new ObjectParameter("paymentDate", typeof(System.DateTime));
    
            var paymentTermIDParameter = paymentTermID.HasValue ?
                new ObjectParameter("paymentTermID", paymentTermID) :
                new ObjectParameter("paymentTermID", typeof(int));
    
            var paidThroughIDParameter = paidThroughID.HasValue ?
                new ObjectParameter("paidThroughID", paidThroughID) :
                new ObjectParameter("paidThroughID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("referenceNo", referenceNo) :
                new ObjectParameter("referenceNo", typeof(string));
    
            var taxDeductedParameter = taxDeducted.HasValue ?
                new ObjectParameter("taxDeducted", taxDeducted) :
                new ObjectParameter("taxDeducted", typeof(bool));
    
            var unpaidBillIDParameter = unpaidBillID.HasValue ?
                new ObjectParameter("unpaidBillID", unpaidBillID) :
                new ObjectParameter("unpaidBillID", typeof(int));
    
            var paymentTotalMadeIDParameter = paymentTotalMadeID.HasValue ?
                new ObjectParameter("paymentTotalMadeID", paymentTotalMadeID) :
                new ObjectParameter("paymentTotalMadeID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetPaymentMade", paymentMadeIDParameter, vendorIDParameter, amountParameter, paymentDateParameter, paymentTermIDParameter, paidThroughIDParameter, referenceNoParameter, taxDeductedParameter, unpaidBillIDParameter, paymentTotalMadeIDParameter, notesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetPaymentReceived(Nullable<int> paymentReceivedID, Nullable<int> customerID, Nullable<decimal> amountReceived, Nullable<decimal> bankCharges, Nullable<System.DateTime> paymentDate, Nullable<System.Guid> paymentNo, Nullable<int> paymentModeID, Nullable<int> depositToID, string referenceNo, Nullable<int> paymentTotalRecievedID, Nullable<bool> taxdeducted, Nullable<int> unpaidInvoiceID, string notes)
        {
            var paymentReceivedIDParameter = paymentReceivedID.HasValue ?
                new ObjectParameter("paymentReceivedID", paymentReceivedID) :
                new ObjectParameter("paymentReceivedID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var amountReceivedParameter = amountReceived.HasValue ?
                new ObjectParameter("amountReceived", amountReceived) :
                new ObjectParameter("amountReceived", typeof(decimal));
    
            var bankChargesParameter = bankCharges.HasValue ?
                new ObjectParameter("bankCharges", bankCharges) :
                new ObjectParameter("bankCharges", typeof(decimal));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("paymentDate", paymentDate) :
                new ObjectParameter("paymentDate", typeof(System.DateTime));
    
            var paymentNoParameter = paymentNo.HasValue ?
                new ObjectParameter("paymentNo", paymentNo) :
                new ObjectParameter("paymentNo", typeof(System.Guid));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("paymentModeID", paymentModeID) :
                new ObjectParameter("paymentModeID", typeof(int));
    
            var depositToIDParameter = depositToID.HasValue ?
                new ObjectParameter("depositToID", depositToID) :
                new ObjectParameter("depositToID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("referenceNo", referenceNo) :
                new ObjectParameter("referenceNo", typeof(string));
    
            var paymentTotalRecievedIDParameter = paymentTotalRecievedID.HasValue ?
                new ObjectParameter("paymentTotalRecievedID", paymentTotalRecievedID) :
                new ObjectParameter("paymentTotalRecievedID", typeof(int));
    
            var taxdeductedParameter = taxdeducted.HasValue ?
                new ObjectParameter("taxdeducted", taxdeducted) :
                new ObjectParameter("taxdeducted", typeof(bool));
    
            var unpaidInvoiceIDParameter = unpaidInvoiceID.HasValue ?
                new ObjectParameter("unpaidInvoiceID", unpaidInvoiceID) :
                new ObjectParameter("unpaidInvoiceID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetPaymentReceived", paymentReceivedIDParameter, customerIDParameter, amountReceivedParameter, bankChargesParameter, paymentDateParameter, paymentNoParameter, paymentModeIDParameter, depositToIDParameter, referenceNoParameter, paymentTotalRecievedIDParameter, taxdeductedParameter, unpaidInvoiceIDParameter, notesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetPaymentTotalMade(Nullable<int> paymentTotalMadeID, Nullable<decimal> total, Nullable<decimal> amountPaid, Nullable<decimal> amountUsedForPayments, Nullable<decimal> amountRefunded, Nullable<decimal> amountInExcess)
        {
            var paymentTotalMadeIDParameter = paymentTotalMadeID.HasValue ?
                new ObjectParameter("paymentTotalMadeID", paymentTotalMadeID) :
                new ObjectParameter("paymentTotalMadeID", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var amountPaidParameter = amountPaid.HasValue ?
                new ObjectParameter("amountPaid", amountPaid) :
                new ObjectParameter("amountPaid", typeof(decimal));
    
            var amountUsedForPaymentsParameter = amountUsedForPayments.HasValue ?
                new ObjectParameter("amountUsedForPayments", amountUsedForPayments) :
                new ObjectParameter("amountUsedForPayments", typeof(decimal));
    
            var amountRefundedParameter = amountRefunded.HasValue ?
                new ObjectParameter("amountRefunded", amountRefunded) :
                new ObjectParameter("amountRefunded", typeof(decimal));
    
            var amountInExcessParameter = amountInExcess.HasValue ?
                new ObjectParameter("amountInExcess", amountInExcess) :
                new ObjectParameter("amountInExcess", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetPaymentTotalMade", paymentTotalMadeIDParameter, totalParameter, amountPaidParameter, amountUsedForPaymentsParameter, amountRefundedParameter, amountInExcessParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetPaymentTotalRecieved(Nullable<int> paymentTotalRecievedID, Nullable<decimal> total, Nullable<decimal> amountReceived, Nullable<decimal> amountUsedForPayments, Nullable<decimal> amountRefunded, Nullable<decimal> amountInExcess)
        {
            var paymentTotalRecievedIDParameter = paymentTotalRecievedID.HasValue ?
                new ObjectParameter("paymentTotalRecievedID", paymentTotalRecievedID) :
                new ObjectParameter("paymentTotalRecievedID", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var amountReceivedParameter = amountReceived.HasValue ?
                new ObjectParameter("amountReceived", amountReceived) :
                new ObjectParameter("amountReceived", typeof(decimal));
    
            var amountUsedForPaymentsParameter = amountUsedForPayments.HasValue ?
                new ObjectParameter("amountUsedForPayments", amountUsedForPayments) :
                new ObjectParameter("amountUsedForPayments", typeof(decimal));
    
            var amountRefundedParameter = amountRefunded.HasValue ?
                new ObjectParameter("amountRefunded", amountRefunded) :
                new ObjectParameter("amountRefunded", typeof(decimal));
    
            var amountInExcessParameter = amountInExcess.HasValue ?
                new ObjectParameter("amountInExcess", amountInExcess) :
                new ObjectParameter("amountInExcess", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetPaymentTotalRecieved", paymentTotalRecievedIDParameter, totalParameter, amountReceivedParameter, amountUsedForPaymentsParameter, amountRefundedParameter, amountInExcessParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetPriceLists(Nullable<int> name, Nullable<int> typeID, Nullable<decimal> itemRate, string description, Nullable<decimal> percentage, Nullable<decimal> roundOffTo, Nullable<int> priceListID)
        {
            var nameParameter = name.HasValue ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("typeID", typeID) :
                new ObjectParameter("typeID", typeof(int));
    
            var itemRateParameter = itemRate.HasValue ?
                new ObjectParameter("itemRate", itemRate) :
                new ObjectParameter("itemRate", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("percentage", percentage) :
                new ObjectParameter("percentage", typeof(decimal));
    
            var roundOffToParameter = roundOffTo.HasValue ?
                new ObjectParameter("roundOffTo", roundOffTo) :
                new ObjectParameter("roundOffTo", typeof(decimal));
    
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("priceListID", priceListID) :
                new ObjectParameter("priceListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetPriceLists", nameParameter, typeIDParameter, itemRateParameter, descriptionParameter, percentageParameter, roundOffToParameter, priceListIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetProject(Nullable<int> projectID, string projectName, string description, Nullable<int> customerID, Nullable<int> billingMethodID, Nullable<decimal> costBudget_, Nullable<decimal> revenueBudget, Nullable<int> hoursBudgetTypeID, Nullable<int> userID, Nullable<int> taskID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("projectName", projectName) :
                new ObjectParameter("projectName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var billingMethodIDParameter = billingMethodID.HasValue ?
                new ObjectParameter("billingMethodID", billingMethodID) :
                new ObjectParameter("billingMethodID", typeof(int));
    
            var costBudget_Parameter = costBudget_.HasValue ?
                new ObjectParameter("costBudget_", costBudget_) :
                new ObjectParameter("costBudget_", typeof(decimal));
    
            var revenueBudgetParameter = revenueBudget.HasValue ?
                new ObjectParameter("revenueBudget", revenueBudget) :
                new ObjectParameter("revenueBudget", typeof(decimal));
    
            var hoursBudgetTypeIDParameter = hoursBudgetTypeID.HasValue ?
                new ObjectParameter("hoursBudgetTypeID", hoursBudgetTypeID) :
                new ObjectParameter("hoursBudgetTypeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("taskID", taskID) :
                new ObjectParameter("taskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetProject", projectIDParameter, projectNameParameter, descriptionParameter, customerIDParameter, billingMethodIDParameter, costBudget_Parameter, revenueBudgetParameter, hoursBudgetTypeIDParameter, userIDParameter, taskIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetPurchaseOrder(Nullable<int> purchaseOrderID, Nullable<int> vendorID, Nullable<int> deliverToID, Nullable<System.Guid> purchaseOrderNo, string referenceNo, Nullable<System.DateTime> date, Nullable<System.DateTime> expectedDeliveryDate, Nullable<int> paymentTermID, string shipmentPreference, Nullable<int> itemDetailID, string customerNotes, string adjustmentText, Nullable<bool> termsConditions, Nullable<decimal> adjustmentValue, Nullable<decimal> shippingCharges)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("purchaseOrderID", purchaseOrderID) :
                new ObjectParameter("purchaseOrderID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var deliverToIDParameter = deliverToID.HasValue ?
                new ObjectParameter("deliverToID", deliverToID) :
                new ObjectParameter("deliverToID", typeof(int));
    
            var purchaseOrderNoParameter = purchaseOrderNo.HasValue ?
                new ObjectParameter("purchaseOrderNo", purchaseOrderNo) :
                new ObjectParameter("purchaseOrderNo", typeof(System.Guid));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("referenceNo", referenceNo) :
                new ObjectParameter("referenceNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var expectedDeliveryDateParameter = expectedDeliveryDate.HasValue ?
                new ObjectParameter("expectedDeliveryDate", expectedDeliveryDate) :
                new ObjectParameter("expectedDeliveryDate", typeof(System.DateTime));
    
            var paymentTermIDParameter = paymentTermID.HasValue ?
                new ObjectParameter("paymentTermID", paymentTermID) :
                new ObjectParameter("paymentTermID", typeof(int));
    
            var shipmentPreferenceParameter = shipmentPreference != null ?
                new ObjectParameter("shipmentPreference", shipmentPreference) :
                new ObjectParameter("shipmentPreference", typeof(string));
    
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            var customerNotesParameter = customerNotes != null ?
                new ObjectParameter("customerNotes", customerNotes) :
                new ObjectParameter("customerNotes", typeof(string));
    
            var adjustmentTextParameter = adjustmentText != null ?
                new ObjectParameter("adjustmentText", adjustmentText) :
                new ObjectParameter("adjustmentText", typeof(string));
    
            var termsConditionsParameter = termsConditions.HasValue ?
                new ObjectParameter("termsConditions", termsConditions) :
                new ObjectParameter("termsConditions", typeof(bool));
    
            var adjustmentValueParameter = adjustmentValue.HasValue ?
                new ObjectParameter("adjustmentValue", adjustmentValue) :
                new ObjectParameter("adjustmentValue", typeof(decimal));
    
            var shippingChargesParameter = shippingCharges.HasValue ?
                new ObjectParameter("shippingCharges", shippingCharges) :
                new ObjectParameter("shippingCharges", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetPurchaseOrder", purchaseOrderIDParameter, vendorIDParameter, deliverToIDParameter, purchaseOrderNoParameter, referenceNoParameter, dateParameter, expectedDeliveryDateParameter, paymentTermIDParameter, shipmentPreferenceParameter, itemDetailIDParameter, customerNotesParameter, adjustmentTextParameter, termsConditionsParameter, adjustmentValueParameter, shippingChargesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetRecordExpense(Nullable<int> recordExpenseID, Nullable<System.DateTime> date, Nullable<int> expenseAccountID, Nullable<decimal> amount, Nullable<int> taxID, Nullable<int> paidThroughID, Nullable<int> vendorID, string referenceNo, string notes, Nullable<int> customerID)
        {
            var recordExpenseIDParameter = recordExpenseID.HasValue ?
                new ObjectParameter("recordExpenseID", recordExpenseID) :
                new ObjectParameter("recordExpenseID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var expenseAccountIDParameter = expenseAccountID.HasValue ?
                new ObjectParameter("expenseAccountID", expenseAccountID) :
                new ObjectParameter("expenseAccountID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("taxID", taxID) :
                new ObjectParameter("taxID", typeof(int));
    
            var paidThroughIDParameter = paidThroughID.HasValue ?
                new ObjectParameter("paidThroughID", paidThroughID) :
                new ObjectParameter("paidThroughID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("referenceNo", referenceNo) :
                new ObjectParameter("referenceNo", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetRecordExpense", recordExpenseIDParameter, dateParameter, expenseAccountIDParameter, amountParameter, taxIDParameter, paidThroughIDParameter, vendorIDParameter, referenceNoParameter, notesParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetRecordMileage(Nullable<int> recordMileageID, Nullable<bool> associateEmployees, Nullable<int> defaultMileageAccountID, Nullable<int> defaultUnitID, Nullable<decimal> mileageRate, Nullable<System.DateTime> startDate)
        {
            var recordMileageIDParameter = recordMileageID.HasValue ?
                new ObjectParameter("recordMileageID", recordMileageID) :
                new ObjectParameter("recordMileageID", typeof(int));
    
            var associateEmployeesParameter = associateEmployees.HasValue ?
                new ObjectParameter("associateEmployees", associateEmployees) :
                new ObjectParameter("associateEmployees", typeof(bool));
    
            var defaultMileageAccountIDParameter = defaultMileageAccountID.HasValue ?
                new ObjectParameter("defaultMileageAccountID", defaultMileageAccountID) :
                new ObjectParameter("defaultMileageAccountID", typeof(int));
    
            var defaultUnitIDParameter = defaultUnitID.HasValue ?
                new ObjectParameter("defaultUnitID", defaultUnitID) :
                new ObjectParameter("defaultUnitID", typeof(int));
    
            var mileageRateParameter = mileageRate.HasValue ?
                new ObjectParameter("mileageRate", mileageRate) :
                new ObjectParameter("mileageRate", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetRecordMileage", recordMileageIDParameter, associateEmployeesParameter, defaultMileageAccountIDParameter, defaultUnitIDParameter, mileageRateParameter, startDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetRecurringBill(Nullable<int> recurringBillID, Nullable<int> vendorID, Nullable<int> profileName, Nullable<int> repeatEveryID, Nullable<System.DateTime> startOn, Nullable<System.DateTime> endsOn, Nullable<bool> neverExpires, Nullable<int> paymentTermID, Nullable<int> itemDetailID, Nullable<decimal> shippingCharges, Nullable<decimal> adjustmentValue, string adjustmentText)
        {
            var recurringBillIDParameter = recurringBillID.HasValue ?
                new ObjectParameter("recurringBillID", recurringBillID) :
                new ObjectParameter("recurringBillID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var profileNameParameter = profileName.HasValue ?
                new ObjectParameter("profileName", profileName) :
                new ObjectParameter("profileName", typeof(int));
    
            var repeatEveryIDParameter = repeatEveryID.HasValue ?
                new ObjectParameter("repeatEveryID", repeatEveryID) :
                new ObjectParameter("repeatEveryID", typeof(int));
    
            var startOnParameter = startOn.HasValue ?
                new ObjectParameter("startOn", startOn) :
                new ObjectParameter("startOn", typeof(System.DateTime));
    
            var endsOnParameter = endsOn.HasValue ?
                new ObjectParameter("endsOn", endsOn) :
                new ObjectParameter("endsOn", typeof(System.DateTime));
    
            var neverExpiresParameter = neverExpires.HasValue ?
                new ObjectParameter("neverExpires", neverExpires) :
                new ObjectParameter("neverExpires", typeof(bool));
    
            var paymentTermIDParameter = paymentTermID.HasValue ?
                new ObjectParameter("paymentTermID", paymentTermID) :
                new ObjectParameter("paymentTermID", typeof(int));
    
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            var shippingChargesParameter = shippingCharges.HasValue ?
                new ObjectParameter("shippingCharges", shippingCharges) :
                new ObjectParameter("shippingCharges", typeof(decimal));
    
            var adjustmentValueParameter = adjustmentValue.HasValue ?
                new ObjectParameter("adjustmentValue", adjustmentValue) :
                new ObjectParameter("adjustmentValue", typeof(decimal));
    
            var adjustmentTextParameter = adjustmentText != null ?
                new ObjectParameter("adjustmentText", adjustmentText) :
                new ObjectParameter("adjustmentText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetRecurringBill", recurringBillIDParameter, vendorIDParameter, profileNameParameter, repeatEveryIDParameter, startOnParameter, endsOnParameter, neverExpiresParameter, paymentTermIDParameter, itemDetailIDParameter, shippingChargesParameter, adjustmentValueParameter, adjustmentTextParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetRecurringExpense(Nullable<int> recurringExpenseID, Nullable<int> repeatEveryID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endsOn, Nullable<bool> neverExpires, Nullable<int> expenseAccountID, Nullable<decimal> amount, Nullable<int> taxID, Nullable<int> paidThroughID, Nullable<int> vendorID, string notes, Nullable<int> customerID)
        {
            var recurringExpenseIDParameter = recurringExpenseID.HasValue ?
                new ObjectParameter("recurringExpenseID", recurringExpenseID) :
                new ObjectParameter("recurringExpenseID", typeof(int));
    
            var repeatEveryIDParameter = repeatEveryID.HasValue ?
                new ObjectParameter("repeatEveryID", repeatEveryID) :
                new ObjectParameter("repeatEveryID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endsOnParameter = endsOn.HasValue ?
                new ObjectParameter("endsOn", endsOn) :
                new ObjectParameter("endsOn", typeof(System.DateTime));
    
            var neverExpiresParameter = neverExpires.HasValue ?
                new ObjectParameter("neverExpires", neverExpires) :
                new ObjectParameter("neverExpires", typeof(bool));
    
            var expenseAccountIDParameter = expenseAccountID.HasValue ?
                new ObjectParameter("expenseAccountID", expenseAccountID) :
                new ObjectParameter("expenseAccountID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("taxID", taxID) :
                new ObjectParameter("taxID", typeof(int));
    
            var paidThroughIDParameter = paidThroughID.HasValue ?
                new ObjectParameter("paidThroughID", paidThroughID) :
                new ObjectParameter("paidThroughID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetRecurringExpense", recurringExpenseIDParameter, repeatEveryIDParameter, startDateParameter, endsOnParameter, neverExpiresParameter, expenseAccountIDParameter, amountParameter, taxIDParameter, paidThroughIDParameter, vendorIDParameter, notesParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetRecurringInvoice(Nullable<int> recurringInvoiceID, Nullable<int> customerID, string profileName, string orderNumber, Nullable<System.DateTime> startOn, Nullable<System.DateTime> endsOn, Nullable<bool> neverExpires, Nullable<int> paymentTermID, Nullable<int> salesPersonID, Nullable<int> itemDetailID, string customerNotes, Nullable<decimal> shippingCharges, Nullable<bool> termsConditions, Nullable<decimal> adjustmentValue, string adjustmentText)
        {
            var recurringInvoiceIDParameter = recurringInvoiceID.HasValue ?
                new ObjectParameter("recurringInvoiceID", recurringInvoiceID) :
                new ObjectParameter("recurringInvoiceID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var profileNameParameter = profileName != null ?
                new ObjectParameter("profileName", profileName) :
                new ObjectParameter("profileName", typeof(string));
    
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("orderNumber", orderNumber) :
                new ObjectParameter("orderNumber", typeof(string));
    
            var startOnParameter = startOn.HasValue ?
                new ObjectParameter("startOn", startOn) :
                new ObjectParameter("startOn", typeof(System.DateTime));
    
            var endsOnParameter = endsOn.HasValue ?
                new ObjectParameter("endsOn", endsOn) :
                new ObjectParameter("endsOn", typeof(System.DateTime));
    
            var neverExpiresParameter = neverExpires.HasValue ?
                new ObjectParameter("neverExpires", neverExpires) :
                new ObjectParameter("neverExpires", typeof(bool));
    
            var paymentTermIDParameter = paymentTermID.HasValue ?
                new ObjectParameter("paymentTermID", paymentTermID) :
                new ObjectParameter("paymentTermID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("salesPersonID", salesPersonID) :
                new ObjectParameter("salesPersonID", typeof(int));
    
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            var customerNotesParameter = customerNotes != null ?
                new ObjectParameter("customerNotes", customerNotes) :
                new ObjectParameter("customerNotes", typeof(string));
    
            var shippingChargesParameter = shippingCharges.HasValue ?
                new ObjectParameter("shippingCharges", shippingCharges) :
                new ObjectParameter("shippingCharges", typeof(decimal));
    
            var termsConditionsParameter = termsConditions.HasValue ?
                new ObjectParameter("termsConditions", termsConditions) :
                new ObjectParameter("termsConditions", typeof(bool));
    
            var adjustmentValueParameter = adjustmentValue.HasValue ?
                new ObjectParameter("adjustmentValue", adjustmentValue) :
                new ObjectParameter("adjustmentValue", typeof(decimal));
    
            var adjustmentTextParameter = adjustmentText != null ?
                new ObjectParameter("adjustmentText", adjustmentText) :
                new ObjectParameter("adjustmentText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetRecurringInvoice", recurringInvoiceIDParameter, customerIDParameter, profileNameParameter, orderNumberParameter, startOnParameter, endsOnParameter, neverExpiresParameter, paymentTermIDParameter, salesPersonIDParameter, itemDetailIDParameter, customerNotesParameter, shippingChargesParameter, termsConditionsParameter, adjustmentValueParameter, adjustmentTextParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetRetainerInvoices(Nullable<int> retainerInvoiceID, Nullable<int> referenceNo, Nullable<int> customerID, Nullable<System.Guid> retainerInvoiceNo, Nullable<System.DateTime> retainerInvoiceDate, Nullable<int> projectID, Nullable<decimal> adjustmentValue, string customerNotes, string adjustmentText, Nullable<decimal> shippingCharges)
        {
            var retainerInvoiceIDParameter = retainerInvoiceID.HasValue ?
                new ObjectParameter("retainerInvoiceID", retainerInvoiceID) :
                new ObjectParameter("retainerInvoiceID", typeof(int));
    
            var referenceNoParameter = referenceNo.HasValue ?
                new ObjectParameter("referenceNo", referenceNo) :
                new ObjectParameter("referenceNo", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var retainerInvoiceNoParameter = retainerInvoiceNo.HasValue ?
                new ObjectParameter("retainerInvoiceNo", retainerInvoiceNo) :
                new ObjectParameter("retainerInvoiceNo", typeof(System.Guid));
    
            var retainerInvoiceDateParameter = retainerInvoiceDate.HasValue ?
                new ObjectParameter("retainerInvoiceDate", retainerInvoiceDate) :
                new ObjectParameter("retainerInvoiceDate", typeof(System.DateTime));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var adjustmentValueParameter = adjustmentValue.HasValue ?
                new ObjectParameter("adjustmentValue", adjustmentValue) :
                new ObjectParameter("adjustmentValue", typeof(decimal));
    
            var customerNotesParameter = customerNotes != null ?
                new ObjectParameter("customerNotes", customerNotes) :
                new ObjectParameter("customerNotes", typeof(string));
    
            var adjustmentTextParameter = adjustmentText != null ?
                new ObjectParameter("adjustmentText", adjustmentText) :
                new ObjectParameter("adjustmentText", typeof(string));
    
            var shippingChargesParameter = shippingCharges.HasValue ?
                new ObjectParameter("shippingCharges", shippingCharges) :
                new ObjectParameter("shippingCharges", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetRetainerInvoices", retainerInvoiceIDParameter, referenceNoParameter, customerIDParameter, retainerInvoiceNoParameter, retainerInvoiceDateParameter, projectIDParameter, adjustmentValueParameter, customerNotesParameter, adjustmentTextParameter, shippingChargesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetSaleOrders(Nullable<int> salesOrderID, Nullable<int> customerID, Nullable<System.Guid> salesOrdeNO, string referenceNo, Nullable<System.DateTime> salesOrderDate, Nullable<System.DateTime> expectedShipmentDate, Nullable<int> paymentTermID, Nullable<int> deliveryMethodID, Nullable<int> salesPersonID, Nullable<int> itemDetailID, string customerNotes, Nullable<decimal> shippingCharges, Nullable<bool> termsConditions, Nullable<decimal> agjustmentValue, string adjustmentText)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("salesOrderID", salesOrderID) :
                new ObjectParameter("salesOrderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var salesOrdeNOParameter = salesOrdeNO.HasValue ?
                new ObjectParameter("salesOrdeNO", salesOrdeNO) :
                new ObjectParameter("salesOrdeNO", typeof(System.Guid));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("referenceNo", referenceNo) :
                new ObjectParameter("referenceNo", typeof(string));
    
            var salesOrderDateParameter = salesOrderDate.HasValue ?
                new ObjectParameter("salesOrderDate", salesOrderDate) :
                new ObjectParameter("salesOrderDate", typeof(System.DateTime));
    
            var expectedShipmentDateParameter = expectedShipmentDate.HasValue ?
                new ObjectParameter("expectedShipmentDate", expectedShipmentDate) :
                new ObjectParameter("expectedShipmentDate", typeof(System.DateTime));
    
            var paymentTermIDParameter = paymentTermID.HasValue ?
                new ObjectParameter("paymentTermID", paymentTermID) :
                new ObjectParameter("paymentTermID", typeof(int));
    
            var deliveryMethodIDParameter = deliveryMethodID.HasValue ?
                new ObjectParameter("deliveryMethodID", deliveryMethodID) :
                new ObjectParameter("deliveryMethodID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("salesPersonID", salesPersonID) :
                new ObjectParameter("salesPersonID", typeof(int));
    
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            var customerNotesParameter = customerNotes != null ?
                new ObjectParameter("customerNotes", customerNotes) :
                new ObjectParameter("customerNotes", typeof(string));
    
            var shippingChargesParameter = shippingCharges.HasValue ?
                new ObjectParameter("shippingCharges", shippingCharges) :
                new ObjectParameter("shippingCharges", typeof(decimal));
    
            var termsConditionsParameter = termsConditions.HasValue ?
                new ObjectParameter("termsConditions", termsConditions) :
                new ObjectParameter("termsConditions", typeof(bool));
    
            var agjustmentValueParameter = agjustmentValue.HasValue ?
                new ObjectParameter("agjustmentValue", agjustmentValue) :
                new ObjectParameter("agjustmentValue", typeof(decimal));
    
            var adjustmentTextParameter = adjustmentText != null ?
                new ObjectParameter("adjustmentText", adjustmentText) :
                new ObjectParameter("adjustmentText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetSaleOrders", salesOrderIDParameter, customerIDParameter, salesOrdeNOParameter, referenceNoParameter, salesOrderDateParameter, expectedShipmentDateParameter, paymentTermIDParameter, deliveryMethodIDParameter, salesPersonIDParameter, itemDetailIDParameter, customerNotesParameter, shippingChargesParameter, termsConditionsParameter, agjustmentValueParameter, adjustmentTextParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetTaxes(Nullable<int> taxID, string taxName, Nullable<decimal> rate, Nullable<bool> compoundTax)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("taxID", taxID) :
                new ObjectParameter("taxID", typeof(int));
    
            var taxNameParameter = taxName != null ?
                new ObjectParameter("taxName", taxName) :
                new ObjectParameter("taxName", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("rate", rate) :
                new ObjectParameter("rate", typeof(decimal));
    
            var compoundTaxParameter = compoundTax.HasValue ?
                new ObjectParameter("compoundTax", compoundTax) :
                new ObjectParameter("compoundTax", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetTaxes", taxIDParameter, taxNameParameter, rateParameter, compoundTaxParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetUnpaidBills(Nullable<int> unpaidBillID, Nullable<System.DateTime> date, string billNo, Nullable<decimal> billAmount, Nullable<decimal> amountDue, Nullable<decimal> payment)
        {
            var unpaidBillIDParameter = unpaidBillID.HasValue ?
                new ObjectParameter("unpaidBillID", unpaidBillID) :
                new ObjectParameter("unpaidBillID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var billNoParameter = billNo != null ?
                new ObjectParameter("billNo", billNo) :
                new ObjectParameter("billNo", typeof(string));
    
            var billAmountParameter = billAmount.HasValue ?
                new ObjectParameter("billAmount", billAmount) :
                new ObjectParameter("billAmount", typeof(decimal));
    
            var amountDueParameter = amountDue.HasValue ?
                new ObjectParameter("amountDue", amountDue) :
                new ObjectParameter("amountDue", typeof(decimal));
    
            var paymentParameter = payment.HasValue ?
                new ObjectParameter("payment", payment) :
                new ObjectParameter("payment", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetUnpaidBills", unpaidBillIDParameter, dateParameter, billNoParameter, billAmountParameter, amountDueParameter, paymentParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetUnpaidInvoices(Nullable<int> unpaidInvoiceID, Nullable<System.DateTime> date, string invoiceNo, Nullable<decimal> invoiceAmount, Nullable<decimal> amountDue, Nullable<decimal> payment)
        {
            var unpaidInvoiceIDParameter = unpaidInvoiceID.HasValue ?
                new ObjectParameter("unpaidInvoiceID", unpaidInvoiceID) :
                new ObjectParameter("unpaidInvoiceID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("invoiceNo", invoiceNo) :
                new ObjectParameter("invoiceNo", typeof(string));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("invoiceAmount", invoiceAmount) :
                new ObjectParameter("invoiceAmount", typeof(decimal));
    
            var amountDueParameter = amountDue.HasValue ?
                new ObjectParameter("amountDue", amountDue) :
                new ObjectParameter("amountDue", typeof(decimal));
    
            var paymentParameter = payment.HasValue ?
                new ObjectParameter("payment", payment) :
                new ObjectParameter("payment", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetUnpaidInvoices", unpaidInvoiceIDParameter, dateParameter, invoiceNoParameter, invoiceAmountParameter, amountDueParameter, paymentParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetVendorCredits(Nullable<int> vendorCreditID, Nullable<int> vendorID, string creditNoteNo, string orderNumber, Nullable<System.DateTime> vendorCreditDate, Nullable<int> itemDetailID, string adjustmentText, string notes, Nullable<decimal> adjustmentValue, Nullable<decimal> shippingCharges)
        {
            var vendorCreditIDParameter = vendorCreditID.HasValue ?
                new ObjectParameter("vendorCreditID", vendorCreditID) :
                new ObjectParameter("vendorCreditID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var creditNoteNoParameter = creditNoteNo != null ?
                new ObjectParameter("creditNoteNo", creditNoteNo) :
                new ObjectParameter("creditNoteNo", typeof(string));
    
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("orderNumber", orderNumber) :
                new ObjectParameter("orderNumber", typeof(string));
    
            var vendorCreditDateParameter = vendorCreditDate.HasValue ?
                new ObjectParameter("vendorCreditDate", vendorCreditDate) :
                new ObjectParameter("vendorCreditDate", typeof(System.DateTime));
    
            var itemDetailIDParameter = itemDetailID.HasValue ?
                new ObjectParameter("itemDetailID", itemDetailID) :
                new ObjectParameter("itemDetailID", typeof(int));
    
            var adjustmentTextParameter = adjustmentText != null ?
                new ObjectParameter("adjustmentText", adjustmentText) :
                new ObjectParameter("adjustmentText", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var adjustmentValueParameter = adjustmentValue.HasValue ?
                new ObjectParameter("adjustmentValue", adjustmentValue) :
                new ObjectParameter("adjustmentValue", typeof(decimal));
    
            var shippingChargesParameter = shippingCharges.HasValue ?
                new ObjectParameter("shippingCharges", shippingCharges) :
                new ObjectParameter("shippingCharges", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetVendorCredits", vendorCreditIDParameter, vendorIDParameter, creditNoteNoParameter, orderNumberParameter, vendorCreditDateParameter, itemDetailIDParameter, adjustmentTextParameter, notesParameter, adjustmentValueParameter, shippingChargesParameter);
        }
    }
}
